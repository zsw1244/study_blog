(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{484:function(s,e,n){"use strict";n.r(e);var a=n(22),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"node-中间件机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-中间件机制"}},[s._v("#")]),s._v(" "),n("strong",[s._v("Node 中间件机制")])]),s._v(" "),n("p",[n("strong",[s._v("理解 Node.js 中间件机制核心代码的实现，加深对中间件机制的理解，有助于更好的使用和编写中间件。")])]),s._v(" "),n("h3",{attrs:{id:"一、中间件概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、中间件概念"}},[s._v("#")]),s._v(" "),n("strong",[s._v("一、中间件概念")])]),s._v(" "),n("p",[n("strong",[s._v("在 "),n("strong",[n("code",[s._v("Node.js")])]),s._v(" 中，中间件主要是指封装所有 "),n("strong",[n("code",[s._v("Http")])]),s._v(" 请求细节处理的方法。一次 "),n("strong",[n("code",[s._v("Http")])]),s._v(" 请求通常包含很多工作，如记录日志、")]),n("code",[s._v("ip")]),s._v("** 过滤、查询字符串、请求体解析、"),n("strong",[n("code",[s._v("Cookie")])]),s._v(" 处理、权限验证、参数验证、异常处理等，但对于 "),n("strong",[n("code",[s._v("Web")])]),s._v(" 应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。**")]),s._v(" "),n("p",[n("strong",[s._v("中间件的行为比较类似 "),n("strong",[n("code",[s._v("Java")])]),s._v(" 中过滤器的工作原理，就是在进入具体的业务处理之前，先让过滤器处理。它的工作模型下图所示。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/15842055-dde4fe84cd4282c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"二、中间件机制核心实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、中间件机制核心实现"}},[s._v("#")]),s._v(" "),n("strong",[s._v("二、中间件机制核心实现")])]),s._v(" "),n("p",[n("strong",[s._v("中间件是从 "),n("strong",[n("code",[s._v("Http")])]),s._v(" 请求发起到响应结束过程中的处理方法，通常需要对请求和响应进行处理，因此一个基本的中间件的形式如下：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const middleware = (req, res, next) => {\n  // TODO\n  next()\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("以下通过两种方式的中间件机制的实现来理解中间件是如何工作的。")])]),s._v(" "),n("h4",{attrs:{id:"_1、方式一"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、方式一"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1、方式一")])]),s._v(" "),n("p",[n("strong",[s._v("如下定义三个简单的中间件：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const middleware1 = (req, res, next) => {\n  console.log('middleware1 start')\n  next()\n}\n\nconst middleware2 = (req, res, next) => {\n  console.log('middleware2 start')\n  next()\n}\n\nconst middleware3 = (req, res, next) => {\n  console.log('middleware3 start')\n  next()\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("strong",[s._v("通过递归的形式，将后续中间件的执行方法传递给当前中间件，在当前中间件执行结束，通过调用 "),n("strong",[n("code",[s._v("next()")])]),s._v(" 方法执行后续中间件的调用。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 中间件数组\nconst middlewares = [middleware1, middleware2, middleware3]\nfunction run (req, res) {\n  const next = () => {\n    // 获取中间件数组中第一个中间件\n    const middleware = middlewares.shift()\n    if (middleware) {\n      middleware(req, res, next)\n    }\n  }\n  next()\n}\nrun() // 模拟一次请求发起\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("执行以上代码，可以看到如下结果：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("middleware1 start\nmiddleware2 start\nmiddleware3 start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("如果中间件中有异步操作，需要在异步操作的流程结束后再调用 "),n("strong",[n("code",[s._v("next()")])]),s._v(" 方法，否则中间件不能按顺序执行。改写 "),n("strong",[n("code",[s._v("middleware2")])]),s._v(" 中间件：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const middleware2 = (req, res, next) => {\n  console.log('middleware2 start')\n  new Promise(resolve => {\n    setTimeout(() => resolve(), 1000)\n  }).then(() => {\n    next()\n  })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("执行结果与之前一致，不过middleware3会在middleware2异步完成后执行。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/15842055-62794a71064a92ed.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),s._v(" "),n("h4",{attrs:{id:"_2、方式二"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、方式二"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2、方式二")])]),s._v(" "),n("p",[n("strong",[s._v("有些中间件不止需要在业务处理前执行，还需要在业务处理后执行，比如统计时间的日志中间件。在方式一情况下，无法在 "),n("strong",[n("code",[s._v("next()")])]),s._v(" 为异步操作时再将当前中间件的其他代码作为回调执行。因此可以将")]),s._v(" "),n("code",[s._v("next()")]),s._v("** 方法的后续操作封装成一个 "),n("strong",[n("code",[s._v("Promise")])]),s._v(" 对象，中间件内部就可以使用 **"),n("code",[s._v("next.then()")]),n("strong",[s._v("形式完成业务处理结束后的回调。改写 "),n("strong",[n("code",[s._v("run()")])]),s._v(" 方法如下：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function run (req, res) {\n  const next = () => {\n    const middleware = middlewares.shift()\n    if (middleware) {\n      // 将middleware(req, res, next)包装为Promise对象\n      return Promise.resolve(middleware(req, res, next))\n    }\n  }\n  next()\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("中间件的调用方式需改写为：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const middleware1 = (req, res, next) => {\n  console.log('middleware1 start')\n  // 所有的中间件都应返回一个Promise对象\n  // Promise.resolve()方法接收中间件返回的Promise对象，供下层中间件异步控制\n  return next().then(() => {\n    console.log('middleware1 end')\n  })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("得益于 "),n("strong",[n("code",[s._v("async")])]),s._v(" 函数的自动异步流程控制，中间件也可以用如下方式来实现：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// async函数自动返回Promise对象\nconst middleware2 = async (req, res, next) => {\n  console.log('middleware2 start')\n  await new Promise(resolve => {\n    setTimeout(() => resolve(), 1000)\n  })\n  await next()\n  console.log('middleware2 end')\n}\n\nconst middleware3 = async (req, res, next) => {\n  console.log('middleware3 start')\n  await next()\n  console.log('middleware3 end')\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[n("strong",[s._v("执行结果如下：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/15842055-726b15e73701e39b.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("以上描述了中间件机制中多个异步中间件的调用流程，实际中间件机制的实现还需要考虑异常处理、路由等。")])]),s._v(" "),n("p",[n("strong",[s._v("在 "),n("strong",[n("code",[s._v("express")])]),s._v(" 框架中，中间件的实现方式为方式一，并且全局中间件和内置路由中间件中根据请求路径定义的中间件共同作用，不过无法在业务处理结束后再调用当前中间件中的代码。")]),n("code",[s._v("koa2")]),s._v("** 框架中中间件的实现方式为方式二，将 "),n("strong",[n("code",[s._v("next()")])]),s._v(" 方法返回值封装成一个 "),n("strong",[n("code",[s._v("Promise")])]),s._v("，便于后续中间件的异步流程控制，实现了 "),n("strong",[n("code",[s._v("koa2")])]),s._v(" 框架提出的洋葱圈模型，即每一层中间件相当于一个球面，当贯穿整个模型时，实际上每一个球面会穿透两次。**")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/15842055-8d0fb98ad9482283.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1078/format/webp",alt:"img"}})]),s._v(" "),n("p",[n("code",[s._v("koa2")]),s._v("** 框架的中间件机制实现得非常简洁和优雅，这里学习一下框架中组合多个中间件的核心代码。**")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n  return function (context, next) {\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      // index会在next()方法调用后累加，防止next()方法重复调用\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        // 核心代码\n        // 包装next()方法返回值为Promise对象\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        // 遇到异常中断后续中间件的调用\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h3",{attrs:{id:"三、中间件社区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、中间件社区"}},[s._v("#")]),s._v(" "),n("strong",[s._v("三、中间件社区")])]),s._v(" "),n("p",[n("strong",[s._v("在后续 "),n("strong",[n("code",[s._v("Node.js")])]),s._v(" 学习和应用中，建议使用 "),n("strong",[n("code",[s._v("koa2")])]),s._v(" 框架作为基础框架，这里列出了一些使用比较多的中间件。")])]),s._v(" "),n("p",[n("strong",[s._v("koa-router：路由中间件 koa-bodyparser：http请求主体解析 koa-static：代理静态文件 koa-compress：gzip压缩 koa-logger：日志记录 koa-convert：转换koa1.x版本的中间件 kcors：跨域中间件 koa中间件列表地址：")]),n("a",{attrs:{href:"https://github.com/koajs/koa/wiki",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/koajs/koa/wiki"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"四、总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、总结"}},[s._v("#")]),s._v(" "),n("strong",[s._v("四、总结")])]),s._v(" "),n("p",[n("strong",[s._v("本文主要介绍了中间件的概念、为何引入中间件以及中间件机制的核心实现。中间件机制使得 "),n("strong",[n("code",[s._v("Web")])]),s._v(" 应用具备良好的可扩展性和组合性。")])]),s._v(" "),n("p",[n("strong",[s._v("在实现中间件时，单个中间件应该足够简单，职责单一。由于每个请求都会调用中间件相关代码，中间件的代码应该高效，必要的时候可以缓存重复获取的数据。在对不同的路由使用中间件时，还应该考虑到不同的中间件应用到不同的路由上。")])])])}),[],!1,null,null,null);e.default=t.exports}}]);