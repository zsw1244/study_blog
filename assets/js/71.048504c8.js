(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{488:function(v,_,t){"use strict";t.r(_);var n=t(22),s=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"原型与原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[v._v("#")]),v._v(" "),t("strong",[v._v("原型与原型链")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("所有函数都有一个特别的属性:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("prototype")]),v._v("** : 显式原型属性**")])])]),v._v(" "),t("li",[t("strong",[v._v("所有实例对象都有一个特别的属性:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("__proto__")]),v._v("** : 隐式原型属性**")])])]),v._v(" "),t("li",[t("strong",[v._v("显式原型与隐式原型的关系")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("函数的prototype: 定义函数时被自动赋值, 值默认为{}, 即用为原型对象")])]),v._v(" "),t("li",[t("strong",[v._v("实例对象的")]),v._v("**"),t("strong",[v._v("proto******: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值")])]),v._v(" "),t("li",[t("strong",[v._v("原型对象即为当前实例对象的父对象")])])])]),v._v(" "),t("li",[t("strong",[v._v("原型链")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("所有的实例对象都有")]),v._v("****proto****"),t("strong",[v._v("属性, 它指向的就是原型对象")])]),v._v(" "),t("li",[t("strong",[v._v("这样通过")]),v._v("****proto****"),t("strong",[v._v("属性就形成了一个链的结构----\x3e原型链")])]),v._v(" "),t("li",[t("strong",[v._v("当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找")])]),v._v(" "),t("li",[t("strong",[v._v("当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作")])])])])]),v._v(" "),t("h2",{attrs:{id:"执行上下文与执行上下文栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与执行上下文栈"}},[v._v("#")]),v._v(" "),t("strong",[v._v("执行上下文与执行上下文栈")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("变量提升与函数提升")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("变量提升: 在变量定义语句之前, 就可以访问到这个变量(undefined)")])]),v._v(" "),t("li",[t("strong",[v._v("函数提升: 在函数定义语句之前, 就执行该函数")])]),v._v(" "),t("li",[t("strong",[v._v("先有变量提升, 再有函数提升")])])])]),v._v(" "),t("li",[t("strong",[v._v("理解")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("执行上下文: 由js引擎自动创建的对象, 包含对应作用域中的所有变量属性")])]),v._v(" "),t("li",[t("strong",[v._v("执行上下文栈: 用来管理产生的多个执行上下文")])])])]),v._v(" "),t("li",[t("strong",[v._v("分类:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("全局: window")])]),v._v(" "),t("li",[t("strong",[v._v("函数: 对程序员来说是透明的")])])])]),v._v(" "),t("li",[t("strong",[v._v("生命周期")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("全局 : 准备执行全局代码前产生, 当页面刷新/关闭页面时死亡")])]),v._v(" "),t("li",[t("strong",[v._v("函数 : 调用函数时产生, 函数执行完时死亡")])])])]),v._v(" "),t("li",[t("strong",[v._v("包含哪些属性:")]),v._v(" "),t("ul",[t("li",[v._v("**全局 : **\n"),t("ul",[t("li",[t("strong",[v._v("用var定义的全局变量  ==>undefined")])]),v._v(" "),t("li",[t("strong",[v._v("使用function声明的函数   ===>function")])]),v._v(" "),t("li",[t("strong",[v._v("this   ===>window")])])])]),v._v(" "),t("li",[t("strong",[v._v("函数")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("用var定义的局部变量  ==>undefined")])]),v._v(" "),t("li",[t("strong",[v._v("使用function声明的函数   ===>function")])]),v._v(" "),t("li",[v._v("**this   ===> 调用函数的对象, 如果没有指定就是window **")]),v._v(" "),t("li",[t("strong",[v._v("形参变量   ===>对应实参值")])]),v._v(" "),t("li",[t("strong",[v._v("arguments ===>实参列表的伪数组")])])])])])]),v._v(" "),t("li",[t("strong",[v._v("执行上下文创建和初始化的过程")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("全局:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("在全局代码执行前最先创建一个全局执行上下文(window)")])]),v._v(" "),t("li",[t("strong",[v._v("收集一些全局变量, 并初始化")])]),v._v(" "),t("li",[t("strong",[v._v("将这些变量设置为window的属性")])])])]),v._v(" "),t("li",[t("strong",[v._v("函数:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("在调用函数时, 在执行函数体之前先创建一个函数执行上下文")])]),v._v(" "),t("li",[t("strong",[v._v("收集一些局部变量, 并初始化")])]),v._v(" "),t("li",[t("strong",[v._v("将这些变量设置为执行上下文的属性")])])])])])])]),v._v(" "),t("h2",{attrs:{id:"作用域与作用域链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域与作用域链"}},[v._v("#")]),v._v(" "),t("strong",[v._v("作用域与作用域链")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("理解:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("作用域: 一块代码区域, 在编码时就确定了, 不会再变化")])]),v._v(" "),t("li",[t("strong",[v._v("作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量")])])])]),v._v(" "),t("li",[t("strong",[v._v("分类:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("全局")])]),v._v(" "),t("li",[t("strong",[v._v("函数")])]),v._v(" "),t("li",[t("strong",[v._v("js没有块作用域(在ES6之前)")])])])]),v._v(" "),t("li",[t("strong",[v._v("作用")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("作用域: 隔离变量, 可以在不同作用域定义同名的变量不冲突")])]),v._v(" "),t("li",[t("strong",[v._v("作用域链: 查找变量")])])])]),v._v(" "),t("li",[t("strong",[v._v("区别作用域与执行上下文")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("作用域: 静态的, 编码时就确定了(不是在运行时), 一旦确定就不会变化了")])]),v._v(" "),t("li",[t("strong",[v._v("执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失")])]),v._v(" "),t("li",[t("strong",[v._v("联系: 执行上下文环境是在对应的作用域中的")])])])])]),v._v(" "),t("h2",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[v._v("#")]),v._v(" **闭包 **")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("理解:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("当嵌套的内部函数引用了外部函数的变量时就产生了闭包")])]),v._v(" "),t("li",[t("strong",[v._v("通过chrome工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性")])])])]),v._v(" "),t("li",[t("strong",[v._v("作用:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("延长局部变量的生命周期")])]),v._v(" "),t("li",[t("strong",[v._v("让函数外部能操作内部的局部变量")])])])]),v._v(" "),t("li",[t("strong",[v._v("写一个闭包程序")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("function fn1() {\n  var a = 2;\n  function fn2() {\n    a++;\n    console.log(a);\n  }\n  return fn2;\n}\nvar f = fn1();\nf();\nf();\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br"),t("span",{staticClass:"line-number"},[v._v("9")]),t("br"),t("span",{staticClass:"line-number"},[v._v("10")]),t("br"),t("span",{staticClass:"line-number"},[v._v("11")]),t("br")])])]),v._v(" "),t("li",[t("strong",[v._v("闭包应用:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("模块化: 封装一些数据以及操作数据的函数, 向外暴露一些行为")])]),v._v(" "),t("li",[t("strong",[v._v("循环遍历加监听")])]),v._v(" "),t("li",[t("strong",[v._v("JS框架(jQuery)大量使用了闭包")])])])]),v._v(" "),t("li",[t("strong",[v._v("缺点:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("变量占用内存的时间可能会过长")])]),v._v(" "),t("li",[t("strong",[v._v("可能导致内存泄露")])]),v._v(" "),t("li",[t("strong",[v._v("解决:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("及时释放 : f = null; //让内部函数对象成为垃圾对象")])])])])])])]),v._v(" "),t("h2",{attrs:{id:"内存溢出与内存泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出与内存泄露"}},[v._v("#")]),v._v(" "),t("strong",[v._v("内存溢出与内存泄露")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("内存溢出")])])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("一种程序运行出现的错误")])]),v._v(" "),t("li",[t("strong",[v._v("当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误")])])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[v._v("内存泄露")])])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("占用的内存没有及时释放")])]),v._v(" "),t("li",[t("strong",[v._v("内存泄露积累多了就容易导致内存溢出")])]),v._v(" "),t("li",[t("strong",[v._v("常见的内存泄露:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("意外的全局变量")])]),v._v(" "),t("li",[t("strong",[v._v("没有及时清理的计时器或回调函数")])]),v._v(" "),t("li",[t("strong",[v._v("闭包")])])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);